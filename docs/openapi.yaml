openapi: 3.0.1
servers:
  - description: localchat local server
    url: http://localhost/api/v1
info:
  version: "1.0.0"
  title: localchat API server
  description: localchat API server
paths:
  /ping:
    get:
      summary: Ping (生存確認)
      responses:
        "200":
          description: 時間情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ping"
  /upload:
    post:
      summary: ファイルのアップロード
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                # The property name 'file' will be used for all files.
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: ファイル情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"
  /profile:
    get:
      summary: 自分のユーザ表示
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users:
    get:
      summary: ユーザ一覧
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
      responses:
        "200":
          description: ユーザ一覧返信
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: ユーザ作成
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/{user_id}:
    parameters:
      - $ref: "#/components/parameters/UserId"
    get:
      summary: ユーザ取得 (ID)
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      summary: ユーザ更新 (ID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      summary: ユーザ削除 (ID)
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/{user_id}/messages:
    parameters:
      - $ref: "#/components/parameters/UserId"
    get:
      summary: ユーザのメッセージ一覧取得
      responses:
        "200":
          description: ユーザメッセージ一覧取得
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /users/{user_id}/groups:
    parameters:
      - $ref: "#/components/parameters/UserId"
    get:
      summary: ？？
      responses:
        "200":
          description: ユーザのグループ一覧取得
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /messages:
    post:
      summary: メッセージ作成
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    get:
      summary: メッセージ一覧取得
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
  /messages/{message_id}:
    parameters:
      - $ref: "#/components/parameters/MessageId"
    get:
      summary: メッセージの取得 (ID)
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    put:
      summary: メッセージの更新 (ID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    delete:
      summary: メッセージの削除 (ID)
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /groups:
    post:
      summary: グループ作成
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    get:
      summary: グループ一覧取得
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /groups/{group_id}:
    parameters:
      - $ref: "#/components/parameters/GroupId"
    get:
      summary: グループ取得 (ID)
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    put:
      summary: グループ更新 (ID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    delete:
      summary: グループ削除 (ID)
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
  /groups/{group_id}/members:
    parameters:
      - $ref: "#/components/parameters/GroupId"
    post:
      summary: グループ参加
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupJoin"
      responses:
        "200":
          description: 参加した情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupJoin"
    get:
      summary: グループ内メンバー一覧取得
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /groups/{group_id}/members/{user_id}:
    parameters:
      - $ref: "#/components/parameters/GroupId"
      - $ref: "#/components/parameters/UserId"
    delete:
      summary: グループ内のメンバー削除
      responses:
        "200":
          description: ユーザ返信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /groups/{group_id}/members/{user_id}/messages:
    parameters:
      - $ref: "#/components/parameters/GroupId"
      - $ref: "#/components/parameters/UserId"
    get:
      summary: group の user のメッセージ一覧
      responses:
        "200":
          description: メッセージ一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
  /groups/{group_id}/messages:
    parameters:
      - $ref: "#/components/parameters/GroupId"
    get:
      summary: group の メッセージ一送信
      responses:
        "200":
          description: メッセージ一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
    post:
      summary: group のメッセージ一送信
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessagePost"
      responses:
        "200":
          description: ユーザにメッセージ送信
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
components:
  parameters:
    Limit:
      in: query
      name: limit
      description: ページの要素数
      schema:
        type: integer
        format: int32
    Offset:
      in: query
      name: offset
      description: ページ開始位置
      schema:
        type: integer
        format: int32
    From:
      in: query
      name: from
      description: 期間絞り込み開始日時
      schema:
        type: string
        format: date-time
    To:
      in: query
      name: to
      description: 期間絞り込み終了日時
      schema:
        type: string
        format: date-time
    UserId:
      in: path
      name: user_id
      description: ユーザID
      required: true
      schema:
        type: integer
        format: int32
    MessageId:
      in: path
      name: message_id
      description: メッセージID
      required: true
      schema:
        type: integer
        format: int32
    GroupId:
      in: path
      name: group_id
      description: グループID
      required: true
      schema:
        type: integer
        format: int32
    ChannelId:
      in: path
      name: channel_id
      description: チャンネルID
      required: true
      schema:
        type: integer
        format: int32
  schemas:
    Ping:
      type: object
      properties:
        time:
          type: string
          format: date-time
    UploadResponse:
      type: object
      properties:
        url:
          description: アップロードしたファイルの URL
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        ip_address:
          type: string
        pc_name:
          type: string
    Message:
      type: object
      properties:
        id:
          type: integer
          format: int32
        author:
          type: integer
          format: int32
        to:
          type: array
          items:
            type: integer
            format: int32
        read:
          type: array
          items:
            type: boolean
        group:
          type: integer
          format: int32
        body:
          type: integer
          format: int32
        thread_id:
          type: integer
          format: int32
    MessagePost:
      type: object
      properties:
        group_id:
          type: integer
          format: int32
        to:
          type: array
          items:
            type: integer
            format: int32
        body:
          type: string
    Group:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    GroupJoin:
      type: object
      properties:
        user_id:
          type: integer
          format: int32
        myself:
          type: boolean
    AccessGroup:
      type: "object"
      properties:
        gid:
          type: "integer"
          format: "int32"
        uid:
          type: "integer"
          format: "int32"
    Channel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        group:
          type: integer
          format: int32
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string